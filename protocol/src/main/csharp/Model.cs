// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: model.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.CatAndDogStudio.GeometricFootball.Protocol {

  /// <summary>Holder for reflection information generated from model.proto</summary>
  public static partial class ModelReflection {

    #region Descriptor
    /// <summary>File descriptor for model.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ModelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgttb2RlbC5wcm90bxIyY29tLmNhdF9hbmRfZG9nX3N0dWRpby5nZW9tZXRy",
            "aWNfZm9vdGJhbGwucHJvdG9jb2wibQoEVGVhbRIMCgRuYW1lGAEgASgJEg4K",
            "BmxlYWd1ZRgCIAEoCRIWCg5zZWxlY3RlZFRhY3RpYxgDIAEoCRIMCgRpY29u",
            "GAQgASgJEhAKCHVuaXF1ZUlkGAUgASgJEg8KB3BsYXllcnMYBiADKAkiOwoR",
            "TWFpblNxdWFkUG9zaXRpb24SFAoMcGxheWVyU2xvdElkGAEgASgJEhAKCHBs",
            "YXllcklkGAIgASgJIpsBCg1UYWN0aWNNYXBwaW5nEhAKCHRhY3RpY0lkGAEg",
            "ASgJEgwKBHN1YnMYAiADKAkSEAoIcmVzZXJ2ZXMYAyADKAkSWAoJbWFpblNx",
            "dWFkGAQgAygLMkUuY29tLmNhdF9hbmRfZG9nX3N0dWRpby5nZW9tZXRyaWNf",
            "Zm9vdGJhbGwucHJvdG9jb2wuTWFpblNxdWFkUG9zaXRpb24ijAEKBlRhY3Rp",
            "YxIQCgh1bmlxdWVJZBgBIAEoCRIMCgRuYW1lGAIgASgJEg0KBW9yZGVyGAMg",
            "ASgFElMKC3BsYXllclNsb3RzGAQgAygLMj4uY29tLmNhdF9hbmRfZG9nX3N0",
            "dWRpby5nZW9tZXRyaWNfZm9vdGJhbGwucHJvdG9jb2wuUGxheWVyU2xvdCJM",
            "CgpQbGF5ZXJTbG90EgoKAmlkGAEgASgJEhEKCXBvc2l0aW9uWBgCIAEoAhIR",
            "Cglwb3NpdGlvblkYAyABKAISDAoEbmFtZRgEIAEoCSKcBAoQUGxheWVyUGFy",
            "YW1ldGVycxIQCgh1bmlxdWVJZBgBIAEoCRJUCghwb3NpdGlvbhgCIAEoDjJC",
            "LmNvbS5jYXRfYW5kX2RvZ19zdHVkaW8uZ2VvbWV0cmljX2Zvb3RiYWxsLnBy",
            "b3RvY29sLlBsYXllclBvc2l0aW9uEgwKBHRlYW0YAyABKAkSEQoJZmlyc3RO",
            "YW1lGAQgASgJEhAKCGxhc3ROYW1lGAUgASgJEhAKCG5pY2tuYW1lGAYgASgJ",
            "EgsKA2FnZRgHIAEoBRIOCgZoZWlnaHQYCCABKAUSDQoFd2lkdGgYCSABKAUS",
            "DAoEcGFjZRgKIAEoBRIPCgdwYXNzaW5nGAsgASgFEhQKDHNob3RBY2N1cmFj",
            "eRgMIAEoBRIUCgxzaG90U3RyZW5ndGgYDSABKAUSDwoHaGVhZGluZxgOIAEo",
            "BRIQCgh0YWNrbGluZxgPIAEoBRIPCgdzbGlkaW5nGBAgASgFEg8KB3N0YW1p",
            "bmEYESABKAUSEAoIYmxvY2tpbmcYEiABKAUSEQoJZHJpYmJsaW5nGBMgASgF",
            "EhMKC2JhbGxDb250cm9sGBQgASgFEg8KB21hcmtpbmcYFSABKAUSDwoHYWdp",
            "bGl0eRgWIAEoBRIQCghzdHJlbmd0aBgXIAEoBRIPCgdqdW1waW5nGBggASgF",
            "EhAKCGhhbmRsaW5nGBkgASgFEg4KBnJlZmxleBgaIAEoBSJgCgdQbGF5ZXJz",
            "ElUKB3BsYXllcnMYASADKAsyRC5jb20uY2F0X2FuZF9kb2dfc3R1ZGlvLmdl",
            "b21ldHJpY19mb290YmFsbC5wcm90b2NvbC5QbGF5ZXJQYXJhbWV0ZXJzInEK",
            "GFBsYXllckZvb3RiYWxsZXJNYXBwaW5ncxJVCgxwbGF5ZXJPd25lcnMYASAD",
            "KAsyPy5jb20uY2F0X2FuZF9kb2dfc3R1ZGlvLmdlb21ldHJpY19mb290YmFs",
            "bC5wcm90b2NvbC5QbGF5ZXJPd25lciJACgtQbGF5ZXJPd25lchIQCgh1c2Vy",
            "TmFtZRgBIAEoCRIQCghwbGF5ZXJJZBgCIAEoCRINCgVjb2xvchgDIAEoCSId",
            "CgxSZWFkeUZvckdhbWUSDQoFcmVhZHkYASABKAgqNwoOR2V0UGxheWVyc01v",
            "ZGUSDgoKR0FNRV9IT1NUUxAAEhUKEVdBSVRJTkdfRk9SX0dBTUVTEAEqggEK",
            "DlBsYXllclBvc2l0aW9uEgYKAkdLEAASBgoCQ0IQARIGCgJMQhACEgcKA0xX",
            "QhADEgYKAlJCEAQSBwoDUldCEAUSBgoCRE0QBhIGCgJDTRAHEgYKAkFNEAgS",
            "BgoCTE0QCRIGCgJMVxAKEgYKAlJNEAsSBgoCUlcQDBIGCgJDRhANQjsKMmNv",
            "bS5jYXRfYW5kX2RvZ19zdHVkaW8uZ2VvbWV0cmljX2Zvb3RiYWxsLnByb3Rv",
            "Y29sQgVNb2RlbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.GetPlayersMode), typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerPosition), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.Team), global::Com.CatAndDogStudio.GeometricFootball.Protocol.Team.Parser, new[]{ "Name", "League", "SelectedTactic", "Icon", "UniqueId", "Players" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.MainSquadPosition), global::Com.CatAndDogStudio.GeometricFootball.Protocol.MainSquadPosition.Parser, new[]{ "PlayerSlotId", "PlayerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.TacticMapping), global::Com.CatAndDogStudio.GeometricFootball.Protocol.TacticMapping.Parser, new[]{ "TacticId", "Subs", "Reserves", "MainSquad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.Tactic), global::Com.CatAndDogStudio.GeometricFootball.Protocol.Tactic.Parser, new[]{ "UniqueId", "Name", "Order", "PlayerSlots" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerSlot), global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerSlot.Parser, new[]{ "Id", "PositionX", "PositionY", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerParameters), global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerParameters.Parser, new[]{ "UniqueId", "Position", "Team", "FirstName", "LastName", "Nickname", "Age", "Height", "Width", "Pace", "Passing", "ShotAccuracy", "ShotStrength", "Heading", "Tackling", "Sliding", "Stamina", "Blocking", "Dribbling", "BallControl", "Marking", "Agility", "Strength", "Jumping", "Handling", "Reflex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.Players), global::Com.CatAndDogStudio.GeometricFootball.Protocol.Players.Parser, new[]{ "Players_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerFootballerMappings), global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerFootballerMappings.Parser, new[]{ "PlayerOwners" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerOwner), global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerOwner.Parser, new[]{ "UserName", "PlayerId", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.CatAndDogStudio.GeometricFootball.Protocol.ReadyForGame), global::Com.CatAndDogStudio.GeometricFootball.Protocol.ReadyForGame.Parser, new[]{ "Ready" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum GetPlayersMode {
    [pbr::OriginalName("GAME_HOSTS")] GameHosts = 0,
    [pbr::OriginalName("WAITING_FOR_GAMES")] WaitingForGames = 1,
  }

  public enum PlayerPosition {
    [pbr::OriginalName("GK")] Gk = 0,
    [pbr::OriginalName("CB")] Cb = 1,
    [pbr::OriginalName("LB")] Lb = 2,
    [pbr::OriginalName("LWB")] Lwb = 3,
    [pbr::OriginalName("RB")] Rb = 4,
    [pbr::OriginalName("RWB")] Rwb = 5,
    [pbr::OriginalName("DM")] Dm = 6,
    [pbr::OriginalName("CM")] Cm = 7,
    [pbr::OriginalName("AM")] Am = 8,
    [pbr::OriginalName("LM")] Lm = 9,
    [pbr::OriginalName("LW")] Lw = 10,
    [pbr::OriginalName("RM")] Rm = 11,
    [pbr::OriginalName("RW")] Rw = 12,
    [pbr::OriginalName("CF")] Cf = 13,
  }

  #endregion

  #region Messages
  public sealed partial class Team : pb::IMessage<Team> {
    private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Team> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team(Team other) : this() {
      name_ = other.name_;
      league_ = other.league_;
      selectedTactic_ = other.selectedTactic_;
      icon_ = other.icon_;
      uniqueId_ = other.uniqueId_;
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team Clone() {
      return new Team(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "league" field.</summary>
    public const int LeagueFieldNumber = 2;
    private string league_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string League {
      get { return league_; }
      set {
        league_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "selectedTactic" field.</summary>
    public const int SelectedTacticFieldNumber = 3;
    private string selectedTactic_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelectedTactic {
      get { return selectedTactic_; }
      set {
        selectedTactic_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 4;
    private string icon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 5;
    private string uniqueId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_players_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> players_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Players {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Team);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Team other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (League != other.League) return false;
      if (SelectedTactic != other.SelectedTactic) return false;
      if (Icon != other.Icon) return false;
      if (UniqueId != other.UniqueId) return false;
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (League.Length != 0) hash ^= League.GetHashCode();
      if (SelectedTactic.Length != 0) hash ^= SelectedTactic.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (UniqueId.Length != 0) hash ^= UniqueId.GetHashCode();
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (League.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(League);
      }
      if (SelectedTactic.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SelectedTactic);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Icon);
      }
      if (UniqueId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UniqueId);
      }
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (League.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(League);
      }
      if (SelectedTactic.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelectedTactic);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (UniqueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
      }
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Team other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.League.Length != 0) {
        League = other.League;
      }
      if (other.SelectedTactic.Length != 0) {
        SelectedTactic = other.SelectedTactic;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.UniqueId.Length != 0) {
        UniqueId = other.UniqueId;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            League = input.ReadString();
            break;
          }
          case 26: {
            SelectedTactic = input.ReadString();
            break;
          }
          case 34: {
            Icon = input.ReadString();
            break;
          }
          case 42: {
            UniqueId = input.ReadString();
            break;
          }
          case 50: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MainSquadPosition : pb::IMessage<MainSquadPosition> {
    private static readonly pb::MessageParser<MainSquadPosition> _parser = new pb::MessageParser<MainSquadPosition>(() => new MainSquadPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MainSquadPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainSquadPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainSquadPosition(MainSquadPosition other) : this() {
      playerSlotId_ = other.playerSlotId_;
      playerId_ = other.playerId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MainSquadPosition Clone() {
      return new MainSquadPosition(this);
    }

    /// <summary>Field number for the "playerSlotId" field.</summary>
    public const int PlayerSlotIdFieldNumber = 1;
    private string playerSlotId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerSlotId {
      get { return playerSlotId_; }
      set {
        playerSlotId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MainSquadPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MainSquadPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerSlotId != other.PlayerSlotId) return false;
      if (PlayerId != other.PlayerId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerSlotId.Length != 0) hash ^= PlayerSlotId.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerSlotId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerSlotId);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerSlotId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerSlotId);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MainSquadPosition other) {
      if (other == null) {
        return;
      }
      if (other.PlayerSlotId.Length != 0) {
        PlayerSlotId = other.PlayerSlotId;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerSlotId = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TacticMapping : pb::IMessage<TacticMapping> {
    private static readonly pb::MessageParser<TacticMapping> _parser = new pb::MessageParser<TacticMapping>(() => new TacticMapping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TacticMapping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TacticMapping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TacticMapping(TacticMapping other) : this() {
      tacticId_ = other.tacticId_;
      subs_ = other.subs_.Clone();
      reserves_ = other.reserves_.Clone();
      mainSquad_ = other.mainSquad_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TacticMapping Clone() {
      return new TacticMapping(this);
    }

    /// <summary>Field number for the "tacticId" field.</summary>
    public const int TacticIdFieldNumber = 1;
    private string tacticId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TacticId {
      get { return tacticId_; }
      set {
        tacticId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subs" field.</summary>
    public const int SubsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_subs_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> subs_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Subs {
      get { return subs_; }
    }

    /// <summary>Field number for the "reserves" field.</summary>
    public const int ReservesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_reserves_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> reserves_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Reserves {
      get { return reserves_; }
    }

    /// <summary>Field number for the "mainSquad" field.</summary>
    public const int MainSquadFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.CatAndDogStudio.GeometricFootball.Protocol.MainSquadPosition> _repeated_mainSquad_codec
        = pb::FieldCodec.ForMessage(34, global::Com.CatAndDogStudio.GeometricFootball.Protocol.MainSquadPosition.Parser);
    private readonly pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.MainSquadPosition> mainSquad_ = new pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.MainSquadPosition>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.MainSquadPosition> MainSquad {
      get { return mainSquad_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TacticMapping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TacticMapping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TacticId != other.TacticId) return false;
      if(!subs_.Equals(other.subs_)) return false;
      if(!reserves_.Equals(other.reserves_)) return false;
      if(!mainSquad_.Equals(other.mainSquad_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TacticId.Length != 0) hash ^= TacticId.GetHashCode();
      hash ^= subs_.GetHashCode();
      hash ^= reserves_.GetHashCode();
      hash ^= mainSquad_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TacticId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TacticId);
      }
      subs_.WriteTo(output, _repeated_subs_codec);
      reserves_.WriteTo(output, _repeated_reserves_codec);
      mainSquad_.WriteTo(output, _repeated_mainSquad_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TacticId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TacticId);
      }
      size += subs_.CalculateSize(_repeated_subs_codec);
      size += reserves_.CalculateSize(_repeated_reserves_codec);
      size += mainSquad_.CalculateSize(_repeated_mainSquad_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TacticMapping other) {
      if (other == null) {
        return;
      }
      if (other.TacticId.Length != 0) {
        TacticId = other.TacticId;
      }
      subs_.Add(other.subs_);
      reserves_.Add(other.reserves_);
      mainSquad_.Add(other.mainSquad_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TacticId = input.ReadString();
            break;
          }
          case 18: {
            subs_.AddEntriesFrom(input, _repeated_subs_codec);
            break;
          }
          case 26: {
            reserves_.AddEntriesFrom(input, _repeated_reserves_codec);
            break;
          }
          case 34: {
            mainSquad_.AddEntriesFrom(input, _repeated_mainSquad_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tactic : pb::IMessage<Tactic> {
    private static readonly pb::MessageParser<Tactic> _parser = new pb::MessageParser<Tactic>(() => new Tactic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tactic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tactic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tactic(Tactic other) : this() {
      uniqueId_ = other.uniqueId_;
      name_ = other.name_;
      order_ = other.order_;
      playerSlots_ = other.playerSlots_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tactic Clone() {
      return new Tactic(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private string uniqueId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 3;
    private int order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "playerSlots" field.</summary>
    public const int PlayerSlotsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerSlot> _repeated_playerSlots_codec
        = pb::FieldCodec.ForMessage(34, global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerSlot.Parser);
    private readonly pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerSlot> playerSlots_ = new pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerSlot> PlayerSlots {
      get { return playerSlots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tactic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tactic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (Name != other.Name) return false;
      if (Order != other.Order) return false;
      if(!playerSlots_.Equals(other.playerSlots_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId.Length != 0) hash ^= UniqueId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      hash ^= playerSlots_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UniqueId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Order != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Order);
      }
      playerSlots_.WriteTo(output, _repeated_playerSlots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      size += playerSlots_.CalculateSize(_repeated_playerSlots_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tactic other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId.Length != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      playerSlots_.Add(other.playerSlots_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UniqueId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Order = input.ReadInt32();
            break;
          }
          case 34: {
            playerSlots_.AddEntriesFrom(input, _repeated_playerSlots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSlot : pb::IMessage<PlayerSlot> {
    private static readonly pb::MessageParser<PlayerSlot> _parser = new pb::MessageParser<PlayerSlot>(() => new PlayerSlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSlot(PlayerSlot other) : this() {
      id_ = other.id_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSlot Clone() {
      return new PlayerSlot(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "positionX" field.</summary>
    public const int PositionXFieldNumber = 2;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "positionY" field.</summary>
    public const int PositionYFieldNumber = 3;
    private float positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionY);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSlot other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0F) {
        PositionY = other.PositionY;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionY = input.ReadFloat();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerParameters : pb::IMessage<PlayerParameters> {
    private static readonly pb::MessageParser<PlayerParameters> _parser = new pb::MessageParser<PlayerParameters>(() => new PlayerParameters());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerParameters(PlayerParameters other) : this() {
      uniqueId_ = other.uniqueId_;
      position_ = other.position_;
      team_ = other.team_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      nickname_ = other.nickname_;
      age_ = other.age_;
      height_ = other.height_;
      width_ = other.width_;
      pace_ = other.pace_;
      passing_ = other.passing_;
      shotAccuracy_ = other.shotAccuracy_;
      shotStrength_ = other.shotStrength_;
      heading_ = other.heading_;
      tackling_ = other.tackling_;
      sliding_ = other.sliding_;
      stamina_ = other.stamina_;
      blocking_ = other.blocking_;
      dribbling_ = other.dribbling_;
      ballControl_ = other.ballControl_;
      marking_ = other.marking_;
      agility_ = other.agility_;
      strength_ = other.strength_;
      jumping_ = other.jumping_;
      handling_ = other.handling_;
      reflex_ = other.reflex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerParameters Clone() {
      return new PlayerParameters(this);
    }

    /// <summary>Field number for the "uniqueId" field.</summary>
    public const int UniqueIdFieldNumber = 1;
    private string uniqueId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerPosition position_ = global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerPosition.Gk;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerPosition Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 3;
    private string team_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Team {
      get { return team_; }
      set {
        team_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firstName" field.</summary>
    public const int FirstNameFieldNumber = 4;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastName" field.</summary>
    public const int LastNameFieldNumber = 5;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 6;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 7;
    private int age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 8;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 9;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "pace" field.</summary>
    public const int PaceFieldNumber = 10;
    private int pace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pace {
      get { return pace_; }
      set {
        pace_ = value;
      }
    }

    /// <summary>Field number for the "passing" field.</summary>
    public const int PassingFieldNumber = 11;
    private int passing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Passing {
      get { return passing_; }
      set {
        passing_ = value;
      }
    }

    /// <summary>Field number for the "shotAccuracy" field.</summary>
    public const int ShotAccuracyFieldNumber = 12;
    private int shotAccuracy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShotAccuracy {
      get { return shotAccuracy_; }
      set {
        shotAccuracy_ = value;
      }
    }

    /// <summary>Field number for the "shotStrength" field.</summary>
    public const int ShotStrengthFieldNumber = 13;
    private int shotStrength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShotStrength {
      get { return shotStrength_; }
      set {
        shotStrength_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 14;
    private int heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "tackling" field.</summary>
    public const int TacklingFieldNumber = 15;
    private int tackling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tackling {
      get { return tackling_; }
      set {
        tackling_ = value;
      }
    }

    /// <summary>Field number for the "sliding" field.</summary>
    public const int SlidingFieldNumber = 16;
    private int sliding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sliding {
      get { return sliding_; }
      set {
        sliding_ = value;
      }
    }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 17;
    private int stamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "blocking" field.</summary>
    public const int BlockingFieldNumber = 18;
    private int blocking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Blocking {
      get { return blocking_; }
      set {
        blocking_ = value;
      }
    }

    /// <summary>Field number for the "dribbling" field.</summary>
    public const int DribblingFieldNumber = 19;
    private int dribbling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Dribbling {
      get { return dribbling_; }
      set {
        dribbling_ = value;
      }
    }

    /// <summary>Field number for the "ballControl" field.</summary>
    public const int BallControlFieldNumber = 20;
    private int ballControl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BallControl {
      get { return ballControl_; }
      set {
        ballControl_ = value;
      }
    }

    /// <summary>Field number for the "marking" field.</summary>
    public const int MarkingFieldNumber = 21;
    private int marking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Marking {
      get { return marking_; }
      set {
        marking_ = value;
      }
    }

    /// <summary>Field number for the "agility" field.</summary>
    public const int AgilityFieldNumber = 22;
    private int agility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Agility {
      get { return agility_; }
      set {
        agility_ = value;
      }
    }

    /// <summary>Field number for the "strength" field.</summary>
    public const int StrengthFieldNumber = 23;
    private int strength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Strength {
      get { return strength_; }
      set {
        strength_ = value;
      }
    }

    /// <summary>Field number for the "jumping" field.</summary>
    public const int JumpingFieldNumber = 24;
    private int jumping_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Jumping {
      get { return jumping_; }
      set {
        jumping_ = value;
      }
    }

    /// <summary>Field number for the "handling" field.</summary>
    public const int HandlingFieldNumber = 25;
    private int handling_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Handling {
      get { return handling_; }
      set {
        handling_ = value;
      }
    }

    /// <summary>Field number for the "reflex" field.</summary>
    public const int ReflexFieldNumber = 26;
    private int reflex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Reflex {
      get { return reflex_; }
      set {
        reflex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueId != other.UniqueId) return false;
      if (Position != other.Position) return false;
      if (Team != other.Team) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (Nickname != other.Nickname) return false;
      if (Age != other.Age) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (Pace != other.Pace) return false;
      if (Passing != other.Passing) return false;
      if (ShotAccuracy != other.ShotAccuracy) return false;
      if (ShotStrength != other.ShotStrength) return false;
      if (Heading != other.Heading) return false;
      if (Tackling != other.Tackling) return false;
      if (Sliding != other.Sliding) return false;
      if (Stamina != other.Stamina) return false;
      if (Blocking != other.Blocking) return false;
      if (Dribbling != other.Dribbling) return false;
      if (BallControl != other.BallControl) return false;
      if (Marking != other.Marking) return false;
      if (Agility != other.Agility) return false;
      if (Strength != other.Strength) return false;
      if (Jumping != other.Jumping) return false;
      if (Handling != other.Handling) return false;
      if (Reflex != other.Reflex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueId.Length != 0) hash ^= UniqueId.GetHashCode();
      if (Position != global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerPosition.Gk) hash ^= Position.GetHashCode();
      if (Team.Length != 0) hash ^= Team.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Pace != 0) hash ^= Pace.GetHashCode();
      if (Passing != 0) hash ^= Passing.GetHashCode();
      if (ShotAccuracy != 0) hash ^= ShotAccuracy.GetHashCode();
      if (ShotStrength != 0) hash ^= ShotStrength.GetHashCode();
      if (Heading != 0) hash ^= Heading.GetHashCode();
      if (Tackling != 0) hash ^= Tackling.GetHashCode();
      if (Sliding != 0) hash ^= Sliding.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (Blocking != 0) hash ^= Blocking.GetHashCode();
      if (Dribbling != 0) hash ^= Dribbling.GetHashCode();
      if (BallControl != 0) hash ^= BallControl.GetHashCode();
      if (Marking != 0) hash ^= Marking.GetHashCode();
      if (Agility != 0) hash ^= Agility.GetHashCode();
      if (Strength != 0) hash ^= Strength.GetHashCode();
      if (Jumping != 0) hash ^= Jumping.GetHashCode();
      if (Handling != 0) hash ^= Handling.GetHashCode();
      if (Reflex != 0) hash ^= Reflex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UniqueId);
      }
      if (Position != global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerPosition.Gk) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Position);
      }
      if (Team.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Team);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LastName);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Nickname);
      }
      if (Age != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Age);
      }
      if (Height != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Width);
      }
      if (Pace != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Pace);
      }
      if (Passing != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Passing);
      }
      if (ShotAccuracy != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ShotAccuracy);
      }
      if (ShotStrength != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ShotStrength);
      }
      if (Heading != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Heading);
      }
      if (Tackling != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Tackling);
      }
      if (Sliding != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Sliding);
      }
      if (Stamina != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Stamina);
      }
      if (Blocking != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Blocking);
      }
      if (Dribbling != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Dribbling);
      }
      if (BallControl != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(BallControl);
      }
      if (Marking != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Marking);
      }
      if (Agility != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(Agility);
      }
      if (Strength != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Strength);
      }
      if (Jumping != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Jumping);
      }
      if (Handling != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Handling);
      }
      if (Reflex != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Reflex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
      }
      if (Position != global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerPosition.Gk) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Position);
      }
      if (Team.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Team);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Pace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pace);
      }
      if (Passing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Passing);
      }
      if (ShotAccuracy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShotAccuracy);
      }
      if (ShotStrength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShotStrength);
      }
      if (Heading != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Heading);
      }
      if (Tackling != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tackling);
      }
      if (Sliding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Sliding);
      }
      if (Stamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Stamina);
      }
      if (Blocking != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Blocking);
      }
      if (Dribbling != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Dribbling);
      }
      if (BallControl != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BallControl);
      }
      if (Marking != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Marking);
      }
      if (Agility != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Agility);
      }
      if (Strength != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Strength);
      }
      if (Jumping != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Jumping);
      }
      if (Handling != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Handling);
      }
      if (Reflex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Reflex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerParameters other) {
      if (other == null) {
        return;
      }
      if (other.UniqueId.Length != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Position != global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerPosition.Gk) {
        Position = other.Position;
      }
      if (other.Team.Length != 0) {
        Team = other.Team;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.Age != 0) {
        Age = other.Age;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Pace != 0) {
        Pace = other.Pace;
      }
      if (other.Passing != 0) {
        Passing = other.Passing;
      }
      if (other.ShotAccuracy != 0) {
        ShotAccuracy = other.ShotAccuracy;
      }
      if (other.ShotStrength != 0) {
        ShotStrength = other.ShotStrength;
      }
      if (other.Heading != 0) {
        Heading = other.Heading;
      }
      if (other.Tackling != 0) {
        Tackling = other.Tackling;
      }
      if (other.Sliding != 0) {
        Sliding = other.Sliding;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.Blocking != 0) {
        Blocking = other.Blocking;
      }
      if (other.Dribbling != 0) {
        Dribbling = other.Dribbling;
      }
      if (other.BallControl != 0) {
        BallControl = other.BallControl;
      }
      if (other.Marking != 0) {
        Marking = other.Marking;
      }
      if (other.Agility != 0) {
        Agility = other.Agility;
      }
      if (other.Strength != 0) {
        Strength = other.Strength;
      }
      if (other.Jumping != 0) {
        Jumping = other.Jumping;
      }
      if (other.Handling != 0) {
        Handling = other.Handling;
      }
      if (other.Reflex != 0) {
        Reflex = other.Reflex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UniqueId = input.ReadString();
            break;
          }
          case 16: {
            Position = (global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerPosition) input.ReadEnum();
            break;
          }
          case 26: {
            Team = input.ReadString();
            break;
          }
          case 34: {
            FirstName = input.ReadString();
            break;
          }
          case 42: {
            LastName = input.ReadString();
            break;
          }
          case 50: {
            Nickname = input.ReadString();
            break;
          }
          case 56: {
            Age = input.ReadInt32();
            break;
          }
          case 64: {
            Height = input.ReadInt32();
            break;
          }
          case 72: {
            Width = input.ReadInt32();
            break;
          }
          case 80: {
            Pace = input.ReadInt32();
            break;
          }
          case 88: {
            Passing = input.ReadInt32();
            break;
          }
          case 96: {
            ShotAccuracy = input.ReadInt32();
            break;
          }
          case 104: {
            ShotStrength = input.ReadInt32();
            break;
          }
          case 112: {
            Heading = input.ReadInt32();
            break;
          }
          case 120: {
            Tackling = input.ReadInt32();
            break;
          }
          case 128: {
            Sliding = input.ReadInt32();
            break;
          }
          case 136: {
            Stamina = input.ReadInt32();
            break;
          }
          case 144: {
            Blocking = input.ReadInt32();
            break;
          }
          case 152: {
            Dribbling = input.ReadInt32();
            break;
          }
          case 160: {
            BallControl = input.ReadInt32();
            break;
          }
          case 168: {
            Marking = input.ReadInt32();
            break;
          }
          case 176: {
            Agility = input.ReadInt32();
            break;
          }
          case 184: {
            Strength = input.ReadInt32();
            break;
          }
          case 192: {
            Jumping = input.ReadInt32();
            break;
          }
          case 200: {
            Handling = input.ReadInt32();
            break;
          }
          case 208: {
            Reflex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Players : pb::IMessage<Players> {
    private static readonly pb::MessageParser<Players> _parser = new pb::MessageParser<Players>(() => new Players());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Players> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Players() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Players(Players other) : this() {
      players_ = other.players_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Players Clone() {
      return new Players(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int Players_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerParameters> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerParameters.Parser);
    private readonly pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerParameters> players_ = new pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerParameters>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerParameters> Players_ {
      get { return players_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Players);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Players other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Players other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerFootballerMappings : pb::IMessage<PlayerFootballerMappings> {
    private static readonly pb::MessageParser<PlayerFootballerMappings> _parser = new pb::MessageParser<PlayerFootballerMappings>(() => new PlayerFootballerMappings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerFootballerMappings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFootballerMappings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFootballerMappings(PlayerFootballerMappings other) : this() {
      playerOwners_ = other.playerOwners_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerFootballerMappings Clone() {
      return new PlayerFootballerMappings(this);
    }

    /// <summary>Field number for the "playerOwners" field.</summary>
    public const int PlayerOwnersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerOwner> _repeated_playerOwners_codec
        = pb::FieldCodec.ForMessage(10, global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerOwner.Parser);
    private readonly pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerOwner> playerOwners_ = new pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerOwner>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Com.CatAndDogStudio.GeometricFootball.Protocol.PlayerOwner> PlayerOwners {
      get { return playerOwners_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerFootballerMappings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerFootballerMappings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!playerOwners_.Equals(other.playerOwners_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= playerOwners_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      playerOwners_.WriteTo(output, _repeated_playerOwners_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += playerOwners_.CalculateSize(_repeated_playerOwners_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerFootballerMappings other) {
      if (other == null) {
        return;
      }
      playerOwners_.Add(other.playerOwners_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            playerOwners_.AddEntriesFrom(input, _repeated_playerOwners_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerOwner : pb::IMessage<PlayerOwner> {
    private static readonly pb::MessageParser<PlayerOwner> _parser = new pb::MessageParser<PlayerOwner>(() => new PlayerOwner());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerOwner> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOwner() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOwner(PlayerOwner other) : this() {
      userName_ = other.userName_;
      playerId_ = other.playerId_;
      color_ = other.color_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerOwner Clone() {
      return new PlayerOwner(this);
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerId" field.</summary>
    public const int PlayerIdFieldNumber = 2;
    private string playerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerId {
      get { return playerId_; }
      set {
        playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerOwner);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerOwner other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (PlayerId != other.PlayerId) return false;
      if (Color != other.Color) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (PlayerId.Length != 0) hash ^= PlayerId.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (PlayerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerId);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (PlayerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerOwner other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.PlayerId.Length != 0) {
        PlayerId = other.PlayerId;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            PlayerId = input.ReadString();
            break;
          }
          case 26: {
            Color = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadyForGame : pb::IMessage<ReadyForGame> {
    private static readonly pb::MessageParser<ReadyForGame> _parser = new pb::MessageParser<ReadyForGame>(() => new ReadyForGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadyForGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.CatAndDogStudio.GeometricFootball.Protocol.ModelReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyForGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyForGame(ReadyForGame other) : this() {
      ready_ = other.ready_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyForGame Clone() {
      return new ReadyForGame(this);
    }

    /// <summary>Field number for the "ready" field.</summary>
    public const int ReadyFieldNumber = 1;
    private bool ready_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ready {
      get { return ready_; }
      set {
        ready_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadyForGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadyForGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ready != other.Ready) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ready != false) hash ^= Ready.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ready != false) {
        output.WriteRawTag(8);
        output.WriteBool(Ready);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ready != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadyForGame other) {
      if (other == null) {
        return;
      }
      if (other.Ready != false) {
        Ready = other.Ready;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ready = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
